// Generated by gencpp from file segement_obstacle_danger/DangerStates.msg
// DO NOT EDIT!


#ifndef SEGEMENT_OBSTACLE_DANGER_MESSAGE_DANGERSTATES_H
#define SEGEMENT_OBSTACLE_DANGER_MESSAGE_DANGERSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segement_obstacle_danger
{
template <class ContainerAllocator>
struct DangerStates_
{
  typedef DangerStates_<ContainerAllocator> Type;

  DangerStates_()
    : state_forward_circle()
    , state_backward_circle()
    , state_forward_segment()
    , state_backward_segment()  {
    }
  DangerStates_(const ContainerAllocator& _alloc)
    : state_forward_circle(_alloc)
    , state_backward_circle(_alloc)
    , state_forward_segment(_alloc)
    , state_backward_segment(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_forward_circle_type;
  _state_forward_circle_type state_forward_circle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_backward_circle_type;
  _state_backward_circle_type state_backward_circle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_forward_segment_type;
  _state_forward_segment_type state_forward_segment;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_backward_segment_type;
  _state_backward_segment_type state_backward_segment;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DANGER)
  #undef DANGER
#endif
#if defined(_WIN32) && defined(CLEAR)
  #undef CLEAR
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  DANGER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CLEAR;

  typedef boost::shared_ptr< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> const> ConstPtr;

}; // struct DangerStates_

typedef ::segement_obstacle_danger::DangerStates_<std::allocator<void> > DangerStates;

typedef boost::shared_ptr< ::segement_obstacle_danger::DangerStates > DangerStatesPtr;
typedef boost::shared_ptr< ::segement_obstacle_danger::DangerStates const> DangerStatesConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      DangerStates_<ContainerAllocator>::DANGER =
        
          "Danger"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      DangerStates_<ContainerAllocator>::CLEAR =
        
          "Clear"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segement_obstacle_danger::DangerStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segement_obstacle_danger::DangerStates_<ContainerAllocator1> & lhs, const ::segement_obstacle_danger::DangerStates_<ContainerAllocator2> & rhs)
{
  return lhs.state_forward_circle == rhs.state_forward_circle &&
    lhs.state_backward_circle == rhs.state_backward_circle &&
    lhs.state_forward_segment == rhs.state_forward_segment &&
    lhs.state_backward_segment == rhs.state_backward_segment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segement_obstacle_danger::DangerStates_<ContainerAllocator1> & lhs, const ::segement_obstacle_danger::DangerStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segement_obstacle_danger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "725ae9e90d4c8165163e7e160cab8649";
  }

  static const char* value(const ::segement_obstacle_danger::DangerStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x725ae9e90d4c8165ULL;
  static const uint64_t static_value2 = 0x163e7e160cab8649ULL;
};

template<class ContainerAllocator>
struct DataType< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segement_obstacle_danger/DangerStates";
  }

  static const char* value(const ::segement_obstacle_danger::DangerStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state_forward_circle\n"
"string state_backward_circle\n"
"string state_forward_segment\n"
"string state_backward_segment\n"
"\n"
"string DANGER = Danger\n"
"string CLEAR = Clear\n"
;
  }

  static const char* value(const ::segement_obstacle_danger::DangerStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_forward_circle);
      stream.next(m.state_backward_circle);
      stream.next(m.state_forward_segment);
      stream.next(m.state_backward_segment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DangerStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segement_obstacle_danger::DangerStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segement_obstacle_danger::DangerStates_<ContainerAllocator>& v)
  {
    s << indent << "state_forward_circle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_forward_circle);
    s << indent << "state_backward_circle: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_backward_circle);
    s << indent << "state_forward_segment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_forward_segment);
    s << indent << "state_backward_segment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state_backward_segment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGEMENT_OBSTACLE_DANGER_MESSAGE_DANGERSTATES_H
