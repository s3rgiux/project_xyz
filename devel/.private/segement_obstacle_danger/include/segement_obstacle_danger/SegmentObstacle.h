// Generated by gencpp from file segement_obstacle_danger/SegmentObstacle.msg
// DO NOT EDIT!


#ifndef SEGEMENT_OBSTACLE_DANGER_MESSAGE_SEGMENTOBSTACLE_H
#define SEGEMENT_OBSTACLE_DANGER_MESSAGE_SEGMENTOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace segement_obstacle_danger
{
template <class ContainerAllocator>
struct SegmentObstacle_
{
  typedef SegmentObstacle_<ContainerAllocator> Type;

  SegmentObstacle_()
    : first_point()
    , last_point()  {
    }
  SegmentObstacle_(const ContainerAllocator& _alloc)
    : first_point(_alloc)
    , last_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _first_point_type;
  _first_point_type first_point;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _last_point_type;
  _last_point_type last_point;





  typedef boost::shared_ptr< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentObstacle_

typedef ::segement_obstacle_danger::SegmentObstacle_<std::allocator<void> > SegmentObstacle;

typedef boost::shared_ptr< ::segement_obstacle_danger::SegmentObstacle > SegmentObstaclePtr;
typedef boost::shared_ptr< ::segement_obstacle_danger::SegmentObstacle const> SegmentObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator1> & lhs, const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator2> & rhs)
{
  return lhs.first_point == rhs.first_point &&
    lhs.last_point == rhs.last_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator1> & lhs, const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace segement_obstacle_danger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37ecbf7e1053bae89f0770466b37c3c3";
  }

  static const char* value(const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37ecbf7e1053bae8ULL;
  static const uint64_t static_value2 = 0x9f0770466b37c3c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segement_obstacle_danger/SegmentObstacle";
  }

  static const char* value(const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point first_point  # First point of the segment [m]\n"
"geometry_msgs/Point last_point   # Last point of the segment [m]\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_point);
      stream.next(m.last_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segement_obstacle_danger::SegmentObstacle_<ContainerAllocator>& v)
  {
    s << indent << "first_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.first_point);
    s << indent << "last_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.last_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGEMENT_OBSTACLE_DANGER_MESSAGE_SEGMENTOBSTACLE_H
