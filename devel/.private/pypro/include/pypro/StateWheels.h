// Generated by gencpp from file pypro/StateWheels.msg
// DO NOT EDIT!


#ifndef PYPRO_MESSAGE_STATEWHEELS_H
#define PYPRO_MESSAGE_STATEWHEELS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pypro
{
template <class ContainerAllocator>
struct StateWheels_
{
  typedef StateWheels_<ContainerAllocator> Type;

  StateWheels_()
    : left_vel(0.0)
    , right_vel(0.0)
    , left_current(0.0)
    , right_current(0.0)
    , time_stamp()  {
    }
  StateWheels_(const ContainerAllocator& _alloc)
    : left_vel(0.0)
    , right_vel(0.0)
    , left_current(0.0)
    , right_current(0.0)
    , time_stamp()  {
  (void)_alloc;
    }



   typedef float _left_vel_type;
  _left_vel_type left_vel;

   typedef float _right_vel_type;
  _right_vel_type right_vel;

   typedef float _left_current_type;
  _left_current_type left_current;

   typedef float _right_current_type;
  _right_current_type right_current;

   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;





  typedef boost::shared_ptr< ::pypro::StateWheels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pypro::StateWheels_<ContainerAllocator> const> ConstPtr;

}; // struct StateWheels_

typedef ::pypro::StateWheels_<std::allocator<void> > StateWheels;

typedef boost::shared_ptr< ::pypro::StateWheels > StateWheelsPtr;
typedef boost::shared_ptr< ::pypro::StateWheels const> StateWheelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pypro::StateWheels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pypro::StateWheels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pypro::StateWheels_<ContainerAllocator1> & lhs, const ::pypro::StateWheels_<ContainerAllocator2> & rhs)
{
  return lhs.left_vel == rhs.left_vel &&
    lhs.right_vel == rhs.right_vel &&
    lhs.left_current == rhs.left_current &&
    lhs.right_current == rhs.right_current &&
    lhs.time_stamp == rhs.time_stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pypro::StateWheels_<ContainerAllocator1> & lhs, const ::pypro::StateWheels_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pypro

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pypro::StateWheels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pypro::StateWheels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pypro::StateWheels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pypro::StateWheels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pypro::StateWheels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pypro::StateWheels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pypro::StateWheels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe7d42a99505b18a4db3afda942ff08d";
  }

  static const char* value(const ::pypro::StateWheels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe7d42a99505b18aULL;
  static const uint64_t static_value2 = 0x4db3afda942ff08dULL;
};

template<class ContainerAllocator>
struct DataType< ::pypro::StateWheels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pypro/StateWheels";
  }

  static const char* value(const ::pypro::StateWheels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pypro::StateWheels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_vel\n"
"float32 right_vel\n"
"float32 left_current\n"
"float32 right_current\n"
"time time_stamp\n"
"\n"
"\n"
;
  }

  static const char* value(const ::pypro::StateWheels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pypro::StateWheels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_vel);
      stream.next(m.right_vel);
      stream.next(m.left_current);
      stream.next(m.right_current);
      stream.next(m.time_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateWheels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pypro::StateWheels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pypro::StateWheels_<ContainerAllocator>& v)
  {
    s << indent << "left_vel: ";
    Printer<float>::stream(s, indent + "  ", v.left_vel);
    s << indent << "right_vel: ";
    Printer<float>::stream(s, indent + "  ", v.right_vel);
    s << indent << "left_current: ";
    Printer<float>::stream(s, indent + "  ", v.left_current);
    s << indent << "right_current: ";
    Printer<float>::stream(s, indent + "  ", v.right_current);
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PYPRO_MESSAGE_STATEWHEELS_H
