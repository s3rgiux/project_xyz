// Generated by gencpp from file control_xy/State.msg
// DO NOT EDIT!


#ifndef CONTROL_XY_MESSAGE_STATE_H
#define CONTROL_XY_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_xy
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : state()  {
    }
  State_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_SHUTDOWN)
  #undef STATE_SHUTDOWN
#endif
#if defined(_WIN32) && defined(STATE_IDLE)
  #undef STATE_IDLE
#endif
#if defined(_WIN32) && defined(STATE_ACTIVE_KARUGAMO)
  #undef STATE_ACTIVE_KARUGAMO
#endif
#if defined(_WIN32) && defined(STATE_ACTIVE_MANUAL)
  #undef STATE_ACTIVE_MANUAL
#endif
#if defined(_WIN32) && defined(STATE_ERROR_OBSTACLE)
  #undef STATE_ERROR_OBSTACLE
#endif
#if defined(_WIN32) && defined(STATE_ERROR_COLLISION)
  #undef STATE_ERROR_COLLISION
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_SHUTDOWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_IDLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_ACTIVE_KARUGAMO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_ACTIVE_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_ERROR_OBSTACLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STATE_ERROR_COLLISION;

  typedef boost::shared_ptr< ::control_xy::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_xy::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::control_xy::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::control_xy::State > StatePtr;
typedef boost::shared_ptr< ::control_xy::State const> StateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_SHUTDOWN =
        
          "SHUTDOWN"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_IDLE =
        
          "IDLE"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_ACTIVE_KARUGAMO =
        
          "ACTIVE_KARUGAMO"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_ACTIVE_MANUAL =
        
          "ACTIVE_MANUAL"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_ERROR_OBSTACLE =
        
          "ERROR_OBSTACLE"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      State_<ContainerAllocator>::STATE_ERROR_COLLISION =
        
          "ERROR_COLLISION"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_xy::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_xy::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_xy::State_<ContainerAllocator1> & lhs, const ::control_xy::State_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_xy::State_<ContainerAllocator1> & lhs, const ::control_xy::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_xy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::control_xy::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_xy::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_xy::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_xy::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_xy::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_xy::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_xy::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d1d2a87dda45fe2cfd2df8cea1145d9";
  }

  static const char* value(const ::control_xy::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d1d2a87dda45fe2ULL;
  static const uint64_t static_value2 = 0xcfd2df8cea1145d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_xy::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_xy/State";
  }

  static const char* value(const ::control_xy::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_xy::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# シャットダウン（非通電）\n"
"string STATE_SHUTDOWN = SHUTDOWN\n"
"# アイドル状態\n"
"string STATE_IDLE = IDLE\n"
"# 動作アクティブ:カルガモ\n"
"string STATE_ACTIVE_KARUGAMO = ACTIVE_KARUGAMO\n"
"# 動作アクティブ:マニュアル\n"
"string STATE_ACTIVE_MANUAL = ACTIVE_MANUAL\n"
"# エラー:近傍に障害物あり\n"
"string STATE_ERROR_OBSTACLE = ERROR_OBSTACLE\n"
"# エラー:ガードバンパー衝突検知\n"
"string STATE_ERROR_COLLISION = ERROR_COLLISION\n"
"\n"
"string state\n"
;
  }

  static const char* value(const ::control_xy::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_xy::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_xy::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_xy::State_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_XY_MESSAGE_STATE_H
