// Generated by gencpp from file peop_extract/peoples.msg
// DO NOT EDIT!


#ifndef PEOP_EXTRACT_MESSAGE_PEOPLES_H
#define PEOP_EXTRACT_MESSAGE_PEOPLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <peop_extract/people_box.h>

namespace peop_extract
{
template <class ContainerAllocator>
struct peoples_
{
  typedef peoples_<ContainerAllocator> Type;

  peoples_()
    : people()  {
    }
  peoples_(const ContainerAllocator& _alloc)
    : people(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::peop_extract::people_box_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::peop_extract::people_box_<ContainerAllocator> >::other >  _people_type;
  _people_type people;





  typedef boost::shared_ptr< ::peop_extract::peoples_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::peop_extract::peoples_<ContainerAllocator> const> ConstPtr;

}; // struct peoples_

typedef ::peop_extract::peoples_<std::allocator<void> > peoples;

typedef boost::shared_ptr< ::peop_extract::peoples > peoplesPtr;
typedef boost::shared_ptr< ::peop_extract::peoples const> peoplesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::peop_extract::peoples_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::peop_extract::peoples_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::peop_extract::peoples_<ContainerAllocator1> & lhs, const ::peop_extract::peoples_<ContainerAllocator2> & rhs)
{
  return lhs.people == rhs.people;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::peop_extract::peoples_<ContainerAllocator1> & lhs, const ::peop_extract::peoples_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace peop_extract

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::peop_extract::peoples_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::peop_extract::peoples_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::peop_extract::peoples_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::peop_extract::peoples_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::peop_extract::peoples_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::peop_extract::peoples_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::peop_extract::peoples_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac59fff88e12974eb0b8f05308bead2c";
  }

  static const char* value(const ::peop_extract::peoples_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac59fff88e12974eULL;
  static const uint64_t static_value2 = 0xb0b8f05308bead2cULL;
};

template<class ContainerAllocator>
struct DataType< ::peop_extract::peoples_<ContainerAllocator> >
{
  static const char* value()
  {
    return "peop_extract/peoples";
  }

  static const char* value(const ::peop_extract::peoples_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::peop_extract::peoples_<ContainerAllocator> >
{
  static const char* value()
  {
    return "peop_extract/people_box[] people\n"
"\n"
"================================================================================\n"
"MSG: peop_extract/people_box\n"
"int16 xmin\n"
"int16 ymin\n"
"int16 xmax\n"
"int16 ymax\n"
"int16 id\n"
"int16 area\n"
;
  }

  static const char* value(const ::peop_extract::peoples_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::peop_extract::peoples_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.people);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct peoples_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::peop_extract::peoples_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::peop_extract::peoples_<ContainerAllocator>& v)
  {
    s << indent << "people[]" << std::endl;
    for (size_t i = 0; i < v.people.size(); ++i)
    {
      s << indent << "  people[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::peop_extract::people_box_<ContainerAllocator> >::stream(s, indent + "    ", v.people[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEOP_EXTRACT_MESSAGE_PEOPLES_H
