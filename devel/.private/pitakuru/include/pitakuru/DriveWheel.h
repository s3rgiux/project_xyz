// Generated by gencpp from file pitakuru/DriveWheel.msg
// DO NOT EDIT!


#ifndef PITAKURU_MESSAGE_DRIVEWHEEL_H
#define PITAKURU_MESSAGE_DRIVEWHEEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pitakuru
{
template <class ContainerAllocator>
struct DriveWheel_
{
  typedef DriveWheel_<ContainerAllocator> Type;

  DriveWheel_()
    : left_rpm(0.0)
    , right_rpm(0.0)  {
    }
  DriveWheel_(const ContainerAllocator& _alloc)
    : left_rpm(0.0)
    , right_rpm(0.0)  {
  (void)_alloc;
    }



   typedef float _left_rpm_type;
  _left_rpm_type left_rpm;

   typedef float _right_rpm_type;
  _right_rpm_type right_rpm;





  typedef boost::shared_ptr< ::pitakuru::DriveWheel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pitakuru::DriveWheel_<ContainerAllocator> const> ConstPtr;

}; // struct DriveWheel_

typedef ::pitakuru::DriveWheel_<std::allocator<void> > DriveWheel;

typedef boost::shared_ptr< ::pitakuru::DriveWheel > DriveWheelPtr;
typedef boost::shared_ptr< ::pitakuru::DriveWheel const> DriveWheelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pitakuru::DriveWheel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pitakuru::DriveWheel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pitakuru::DriveWheel_<ContainerAllocator1> & lhs, const ::pitakuru::DriveWheel_<ContainerAllocator2> & rhs)
{
  return lhs.left_rpm == rhs.left_rpm &&
    lhs.right_rpm == rhs.right_rpm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pitakuru::DriveWheel_<ContainerAllocator1> & lhs, const ::pitakuru::DriveWheel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pitakuru

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::DriveWheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::DriveWheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::DriveWheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::DriveWheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::DriveWheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::DriveWheel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pitakuru::DriveWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb0186777139ed5386fa80048788f9b4";
  }

  static const char* value(const ::pitakuru::DriveWheel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb0186777139ed53ULL;
  static const uint64_t static_value2 = 0x86fa80048788f9b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pitakuru::DriveWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pitakuru/DriveWheel";
  }

  static const char* value(const ::pitakuru::DriveWheel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pitakuru::DriveWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_rpm\n"
"float32 right_rpm\n"
;
  }

  static const char* value(const ::pitakuru::DriveWheel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pitakuru::DriveWheel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_rpm);
      stream.next(m.right_rpm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveWheel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pitakuru::DriveWheel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pitakuru::DriveWheel_<ContainerAllocator>& v)
  {
    s << indent << "left_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.left_rpm);
    s << indent << "right_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.right_rpm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PITAKURU_MESSAGE_DRIVEWHEEL_H
