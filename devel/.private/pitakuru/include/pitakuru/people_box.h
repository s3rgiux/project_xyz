// Generated by gencpp from file pitakuru/people_box.msg
// DO NOT EDIT!


#ifndef PITAKURU_MESSAGE_PEOPLE_BOX_H
#define PITAKURU_MESSAGE_PEOPLE_BOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pitakuru
{
template <class ContainerAllocator>
struct people_box_
{
  typedef people_box_<ContainerAllocator> Type;

  people_box_()
    : xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , id(0)
    , area(0)  {
    }
  people_box_(const ContainerAllocator& _alloc)
    : xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , id(0)
    , area(0)  {
  (void)_alloc;
    }



   typedef int16_t _xmin_type;
  _xmin_type xmin;

   typedef int16_t _ymin_type;
  _ymin_type ymin;

   typedef int16_t _xmax_type;
  _xmax_type xmax;

   typedef int16_t _ymax_type;
  _ymax_type ymax;

   typedef int16_t _id_type;
  _id_type id;

   typedef int16_t _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::pitakuru::people_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pitakuru::people_box_<ContainerAllocator> const> ConstPtr;

}; // struct people_box_

typedef ::pitakuru::people_box_<std::allocator<void> > people_box;

typedef boost::shared_ptr< ::pitakuru::people_box > people_boxPtr;
typedef boost::shared_ptr< ::pitakuru::people_box const> people_boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pitakuru::people_box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pitakuru::people_box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pitakuru::people_box_<ContainerAllocator1> & lhs, const ::pitakuru::people_box_<ContainerAllocator2> & rhs)
{
  return lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.id == rhs.id &&
    lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pitakuru::people_box_<ContainerAllocator1> & lhs, const ::pitakuru::people_box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pitakuru

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::people_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::people_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::people_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::people_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::people_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::people_box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pitakuru::people_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1e020b78ba46ecabab0208c9a5a82d9";
  }

  static const char* value(const ::pitakuru::people_box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1e020b78ba46ecaULL;
  static const uint64_t static_value2 = 0xbab0208c9a5a82d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::pitakuru::people_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pitakuru/people_box";
  }

  static const char* value(const ::pitakuru::people_box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pitakuru::people_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 xmin\n"
"int16 ymin\n"
"int16 xmax\n"
"int16 ymax\n"
"int16 id\n"
"int16 area\n"
;
  }

  static const char* value(const ::pitakuru::people_box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pitakuru::people_box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.id);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct people_box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pitakuru::people_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pitakuru::people_box_<ContainerAllocator>& v)
  {
    s << indent << "xmin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "area: ";
    Printer<int16_t>::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PITAKURU_MESSAGE_PEOPLE_BOX_H
