// Generated by gencpp from file pitakuru/SoundGoal.msg
// DO NOT EDIT!


#ifndef PITAKURU_MESSAGE_SOUNDGOAL_H
#define PITAKURU_MESSAGE_SOUNDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pitakuru
{
template <class ContainerAllocator>
struct SoundGoal_
{
  typedef SoundGoal_<ContainerAllocator> Type;

  SoundGoal_()
    : type()  {
    }
  SoundGoal_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_ACTIVE)
  #undef TYPE_ACTIVE
#endif
#if defined(_WIN32) && defined(TYPE_ERROR)
  #undef TYPE_ERROR
#endif
#if defined(_WIN32) && defined(TYPE_WARNING)
  #undef TYPE_WARNING
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_ACTIVE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_ERROR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_WARNING;

  typedef boost::shared_ptr< ::pitakuru::SoundGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pitakuru::SoundGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SoundGoal_

typedef ::pitakuru::SoundGoal_<std::allocator<void> > SoundGoal;

typedef boost::shared_ptr< ::pitakuru::SoundGoal > SoundGoalPtr;
typedef boost::shared_ptr< ::pitakuru::SoundGoal const> SoundGoalConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SoundGoal_<ContainerAllocator>::TYPE_ACTIVE =
        
          "\"active\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SoundGoal_<ContainerAllocator>::TYPE_ERROR =
        
          "\"error\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      SoundGoal_<ContainerAllocator>::TYPE_WARNING =
        
          "\"warning\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pitakuru::SoundGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pitakuru::SoundGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pitakuru::SoundGoal_<ContainerAllocator1> & lhs, const ::pitakuru::SoundGoal_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pitakuru::SoundGoal_<ContainerAllocator1> & lhs, const ::pitakuru::SoundGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pitakuru

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::SoundGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pitakuru::SoundGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::SoundGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pitakuru::SoundGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::SoundGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pitakuru::SoundGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pitakuru::SoundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45fee44dd4ceb09077e426ff86232920";
  }

  static const char* value(const ::pitakuru::SoundGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45fee44dd4ceb090ULL;
  static const uint64_t static_value2 = 0x77e426ff86232920ULL;
};

template<class ContainerAllocator>
struct DataType< ::pitakuru::SoundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pitakuru/SoundGoal";
  }

  static const char* value(const ::pitakuru::SoundGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pitakuru::SoundGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string TYPE_ACTIVE = \"active\"\n"
"string TYPE_ERROR = \"error\"\n"
"string TYPE_WARNING = \"warning\"\n"
"\n"
"string type\n"
;
  }

  static const char* value(const ::pitakuru::SoundGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pitakuru::SoundGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pitakuru::SoundGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pitakuru::SoundGoal_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PITAKURU_MESSAGE_SOUNDGOAL_H
