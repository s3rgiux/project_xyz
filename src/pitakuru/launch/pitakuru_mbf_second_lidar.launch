<?xml version="1.0"?>
<launch>
    <arg name="publish_images" default="true"/>
    <arg name="jsdev" default="/dev/input/js0"/>
    <rosparam file="$(find pitakuru)/config/bright_env/pitakuru.yaml" command="load" ns="pitakuru" />



 <!-- スイッチの入出力制御 -->
   
    <node pkg="pitakuru" type="switch.py" name="switch">
        <rosparam command="load" file="$(find pitakuru)/config/bright_env/switch.yaml" />
    </node>


    <!-- カメラから画像を読み込んで配信 -->

<!--  -->
 <node name="uvc_camera_node" pkg="uvc_camera" type="uvc_camera_node" output="screen"> 
    <param name="device" type="string" value="/dev/video0"/>
    <param name="width" type="int" value="640"/> 
    <param name="height" type="int" value="480"/> 
    <param name="fps" type="int" value="7"/>
    <param name="camera_info_url" value="file://$(find pitakuru)/config/bright_env/aruco/camera640.yaml"/>
    </node>


<!-- launch file for ps4 controller -->
<!-- -->
<include file="$(find joy)/launch/joytestps4.launch"/> 

    <!-- 音声再生 -->
<!-- -->
    <node pkg="pitakuru" type="sound.py" name="sound" />



<!-- keiganモーター制御/オドメトリ算出ノード -->
<node pkg="pypro" name="pitakuru_wheels" type="pitakuruWheels.py">
<param name="max_speed"    type="double"	value="3500"/>  <!-- max speed tah can be sent to motors-->
</node>


<!-- -->
    <include file="$(find darknet_ros)/launch/yolo_v3.launch"/> 

<!-- -->
    <include file="$(find sort_track)/launch/sort_big.launch"/> 



    <node pkg="peop_extract" type="peop_ext_sort.py" name="peop_ext_yolo"/>

<node pkg="segement_obstacle_danger" name="segement_obstacle_danger_node" type="seg_obs_danger_intersection.py"/>

<node pkg="segement_obstacle_danger" name="segement_obstacle_danger_backwards_node" type="backwards_save_points.py"/>



<!--  -->
<!-- -->
<node pkg="pitakuru" name="pitakuru_lidar_detect_fail" type="lidar_detect.py"/>

<!-- control xy is the main program build in c++ to make it more fast needs to be compiled if a modification is made-->
<node pkg="control_xy" type="control_xy_node_spline_follow_mixed" name="control_xy" output="screen">
<param name="break_front_distance"    type="double"	value="0.8"/> <!-- 0.75--><!-- breaking distance to  enter in danger zone  -->
<param name="break_danger"    type="double"	value="0.25"/><!-- 0.39--><!-- (not used depercated)distance to  enter in warning zone  -->	
<param name="low_vel_gain_karugamo"    type="double"	value="15"/> <!-- (not used depercated)karugamo gain  angle control   -->
<param name="high_vel_gain_karugamo"    type="double"	value="17"/><!-- 10--> <!-- (not used depercated)karugamo gain  angle control   -->
<param name="low_vel_gain_follow"    type="double"	value="8"/><!-- 12--><!-- people follow gain  angle control   -->
<param name="high_vel_gain_follow"    type="double"	value="8"/> <!-- 12--><!-- people follow gain  angle control   -->
<param name="frontal_gain_karugamo"    type="double"	value="17"/> <!-- (not used depercated)karugamo gain  angle control   -->
<param name="frontal_gain_follow"    type="double"	value="2200"/><!-- 1800--> <!-- gain for frontal control   -->
<param name="frontal_gain_manual"    type="double"	value="00"/> <!-- (not used depercated)gain frontal control   -->
<param name="smooth_accel_karugamo_near"    type="double"	value="0.982"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_karugamo_far"    type="double"	value="0.989"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_manual"    type="double"	value="0.985"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_side_manual"    type="double"	value="0.93"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_side_follow"    type="double"	value="0.93"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_costmap"    type="double"	value="0.7"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="smooth_accel_stop"    type="double"	value="0.96"/> <!-- acceletartion smooth max value up to 0.99   -->
<param name="max_speed_karugamo"    type="double"	value="1400"/> <!-- (not used depercated)max speed value for karugamo   -->
<param name="max_speed_follow_heavy"    type="double"	value="2000"/> <!--1500--><!--3000--> <!--max speed value for frontal people follow-->
<param name="max_speed_follow"    type="double"	value="2000"/> <!--1500--><!--3000--> <!--max speed value for frontal people follow-->
<param name="max_speed_side_follow"    type="double"	value="400"/> <!-- max speed value for side joystick-->
<param name="max_speed_manual"    type="double"	value="2000"/>  <!--15000--><!-- 3000--> <!-- max speed value for frontal joystick-->
<param name="max_speed_manual_heavy"    type="double"	value="1200"/>  <!--15000--><!-- 3000--> <!-- max speed value for frontal joystick-->
<param name="max_speed_side_manual"    type="double"	value="300"/> <!-- max speed value for side joystick-->

<param name="speed_wp_lost"    type="double"	value="1400"/> <!-- speed when is lost or wp mode-->
<param name="max_defelct_angle"    type="double"	value="60"/> <!-- max deflect angle-->
<param name="angle_gain_wp"    type="double"	value="100"/> <!-- max deflect angle-->
<param name="near_far_distance"    type="double"  value="350.0"/> <!-- distance to detect, enter near, far distance in centimeter-->
<param name="dist_robot_people"    type="double"	value="80"/> <!-- max deflect angle-->
<param name="max_dist_toacc"    type="double"	value="350"/> <!-- max dist ot accel or slow down-->
<param name="radius_follow"    type="double"	value="0.37"/> <!--1.0--><!-- radius checking zone to track people once that is already picked for tracking-->
<param name="tresh_amp_up"    type="double"	value="5.0"/> <!-- treshhold amp up -->
<param name="tresh_amp_down"    type="double"	value="3.0"/> <!-- treshhold amp dwn -->
<param name="trigger_vel"    type="double"	value="0.4"/> <!-- velocity to active search for load or not load-->
<param name="trigger_current"    type="double"	value="14"/> <!-- how many amps to activate the heavy load--><!-- 8-->
<param name="vel_detect_scan"    type="double"	value="400"/> <!--vel to start detect collision--><!--1.2-->
<param name="volts_charge"    type="double"	value="23.0"/> <!--volts to show alert to charge-->
<param name="avg_curr_tresh"    type="double"	value="5.2"/> <!--above this we know if we are moving or was just a small movement-->
<param name="heavy_curr_tresh"    type="double"	value="5.9"/> <!--vel to start detect collision-->
<param name="mid_curr_tresh"    type="double"	value="5.9"/> <!--vel to start detect collision-->
<param name="peak_not_heavy_curr"    type="double"	value="4.3"/> <!--vel to start detect collision-->
<param name="count_to_miss"    type="double"	value="44"/> <!--counter that if overpass this then we lost people-->
<param name="gain_to_costmap"    type="double"	value="1.5"/> <!--counter that if overpass this then we lost people-->
<param name="vel_detect_costmap"    type="double"	value="700"/> <!--vel to start detect costmap--><!--0.6-->
<param name="duration_to_lost"    type="double"	value="0.5"/> <!--time in second to see if is lost-->
<param name="min_break_distance"    type="double"	value="0.7"/> <!--time in second to see if is lost-->
<param name="max_break_distance"    type="double"	value="0.9"/> <!--time in second to see if is lost-->
<param name="gain_follow_people"    type="double"	value="1.0"/> <!--time in second to see if is lost-->
<param name="use_ps4_controller"    type="double"	value="0.0"/> <!--time in second to see if is lost-->
<param name="use_hokuyo"    type="double"	value="0.0"/> <!--select 1 to use hokuyo-->
</node>

<!-- extract obstacles form region of interest and send to control_xy -->


<node pkg="obs_extract" type="main_sorted_kalman.py" name="obj_track" >
<param name="front_detection"    type="double"	value="3.5"/> 
<param name="side_detection"    type="double"	value="2.5"/>  
<param name="radius_follow"    type="double"	value="0.37"/>  
</node>

<node pkg="costmap" type="main.py" name="cost_detect">
<param name="dilation"    type="int"	value="4"/> 
</node>


<node name="map_to_odom_base" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map odom"/>


<!-- navigation -->
 <include file="$(find pitakuru)/launch/navigation_mbf.launch"/>

<include file="$(find pitakuru)/launch/second_lidar.launch"/> 

<!--  -->
<!-- -->
<include file="$(find pitakuru)/launch/obstacle_detection_rplidar.launch"/>  


<!-- -->
<node pkg="amcl" type="amcl" name="amcl"/>
<!-- -->
<node name="frame_base" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map my_frame"/>



<arg name="map_file" default="$(find pitakuru)/maps/map.yaml"/>
<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
<!-- -->
<node pkg="pitakuru" type="gmap_amcl.py" name="gmap_amcl" />
<node pkg="pitakuru" type="getGoal.py" name="getGoal" />


</launch>
