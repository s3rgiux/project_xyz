#!/usr/bin/env python

from __future__ import print_function
import sys
import rospy
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import LaserScan
import numpy as np
import imutils
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Vector3

class costmap_karugamo:

  def __init__(self):
    self.crop_pub = rospy.Publisher("crop",Image, queue_size=1)
    self.cost_pub = rospy.Publisher("costdetect",Vector3, queue_size=1)
    self.bridge = CvBridge()
    self.laser_sub = rospy.Subscriber('/scan', LaserScan, self.callbackLaser,queue_size=1)
    self.cmd_vel_sub = rospy.Subscriber('/cmd_vel', Twist, self.vel_callback, queue_size=1)
    self.dilation = rospy.get_param("/cost_detect/dilation")
    self.cost_d = Vector3()
    self.low_speed = False
    self.use_hokuyo = True#False
    self.mask9 = np.array([[-6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6, 6 ],
                        [-6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6, 6],
                        [-6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6, 6 ],
                        [-6, -6, -6, -7, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 6, 6, 6 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ],
                        [-3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3 ]])
    
    self.mask10 = np.array([[-6, -6, -6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6,6, 6 , 6 ],
                        [-6, -6, -6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6, 6, 6 , 6 ],
                        [-6, -6, -6, -6, -6, -7, -7, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 7, 7, 6, 6, 6, 6 , 6 ],
                        [-6, -6, -6, -6, -6, -7, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 6, 6, 6, 6 , 6 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ],
                        [-5, -2, -3, -3, -3, -3, -3, -3, -3, -4,-4, -4, -4, -5, -5, 0, 0, 0, 0, 0, 0, 5, 5, 4 , 4 , 4, 4, 3, 3, 3, 3, 3, 3, 3, 2 , 5 ]])

  def vel_callback(self, data):
    linear_speed = (data.linear.x*21)/0.1045
    if(linear_speed>1900):
      self.low_speed=True
    else:
      self.low_speed=False

  
  def callbackLaser(self,msg):
    img = np.zeros((158, 211), dtype = "uint8")
    cost1 = np.zeros((240, 320), dtype = "uint8")
    cost2 = np.zeros((240, 320), dtype = "uint8")
    bord1 = np.ones((158, 211), dtype = "uint8")
    centery=138
    centerx=105
    if self.use_hokuyo==True:
      for i, theta in enumerate(np.arange(msg.angle_min,msg.angle_max,msg.angle_increment)):
        if not np.isinf(msg.ranges[i]) and msg.ranges[i]>0.15 and msg.ranges[i] < 3.7 :
          y=round(msg.ranges[i]*np.cos(theta)*125/3.7,0)
          x=round(msg.ranges[i]*np.sin(theta)*104/3.7,0)
          img[centery-int(y),centerx-int(x)]=255
          bord1[centery-int(y),centerx-int(x)]=255
        
    else:
      for i, theta in enumerate(np.arange(msg.angle_min,msg.angle_max,msg.angle_increment)):
        if not np.isinf(msg.ranges[i]) and msg.ranges[i]>0.15 and msg.ranges[i] < 3.7 and ((i>0 and i<90) or (i>270 and i<360) ):
          y=round(-msg.ranges[i]*np.cos(theta)*125/3.7,0)
          x=round(-msg.ranges[i]*np.sin(theta)*104/3.7,0)
          img[centery-int(y),centerx-int(x)]=255
          bord1[centery-int(y),centerx-int(x)]=255
        
    kernel = np.ones((3,3),np.uint8)
    dil = cv2.dilate(img,kernel,iterations = 1)
    cost1 = cv2.dilate(dil,kernel,iterations = 2)
    cost2 = cv2.dilate(cost1,kernel,iterations = self.dilation)

    # find contours in the thresholded image
    cnts = cv2.findContours(cost2, cv2.RETR_EXTERNAL,
	                          cv2.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    if self.low_speed:
      ncentery = 117#mask10
      ncenterx = 105
      crop_img  =  cost2[ncentery-20:ncentery+20, ncenterx-16:ncenterx+16]#mask9
      #crop_img = cost2[ncentery-25:ncentery+25, ncenterx-18:ncenterx+18] #mask10
      res = self.mask9*crop_img
      self.cost_d.x = np.sum(res)/425850.0##/271320.0#/222870.0#/222360.0#/222870.0#/122145.0#/76245.0#/58140.0
    else:
      ncentery = 112#mask10
      ncenterx = 105
      crop_img = cost2[ncentery-25:ncentery+25, ncenterx-18:ncenterx+18] #mask10
      res = self.mask10 * crop_img
      self.cost_d.x = np.sum(res)/550000.0##/271320.0#/222870.0#/222360.0#/222870.0#/122145.0#/76245.0#/58140.0

    try:
      self.crop_pub.publish(self.bridge.cv2_to_imgmsg(crop_img, "mono8"))
    except CvBridgeError as e:
      print(e) 


def main(args):
  rospy.init_node('costmap_karugamo', anonymous=True)
  costmap = costmap_karugamo()
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
